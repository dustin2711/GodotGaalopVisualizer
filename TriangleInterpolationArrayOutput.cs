using System;

public static class TriangleInterpolationArrayOutput
{
	public static void Execute(float ax, float ay, float az, float bx, float by, float bz, float cx, float cy, float cz, float t, float[] AI, float[] At, float[] BI, float[] Bt, float[] CI, float[] Ct)
	{
		float[] A1 = new float[16];
		float[] B1 = new float[16];
		float[] B2 = new float[16];
		float[] C1 = new float[16];
		float[] C2 = new float[16];
		float[] C3 = new float[16];
		float[] L1 = new float[16];
		float[] L2 = new float[16];
		float[] lerp = new float[16];
		float[] macro_Motor_abstemp1 = new float[16];
		float[] macro_Motor_abstemp2 = new float[16];
		float[] macro_Motor_temp = new float[16];
		float[] macro_Motor_temp1 = new float[16];
		float[] macro_Motor_temp2 = new float[16];
		float[] P1 = new float[16];
		float[] P2 = new float[16];
		float[] V = new float[16];
		float[] VA = new float[16];
		float[] VB = new float[16];
		float[] VC = new float[16];
		A1[11] = (-az); // e0 ^ (e1 ^ e2)
		A1[13] = (-ax); // e0 ^ (e2 ^ e3)
		B1[11] = (-bz); // e0 ^ (e1 ^ e2)
		B1[13] = (-bx); // e0 ^ (e2 ^ e3)
		C1[11] = (-cz); // e0 ^ (e1 ^ e2)
		C1[13] = (-cx); // e0 ^ (e2 ^ e3)
		At[1] = ((-(0.2955f * ay)) + -0.0591f) * 0.9553375f + -0.0564405f + (-((0.9553375f * ay + 0.191f) * -0.2955f)) + 0.05646044625f; // e0
		At[11] = (0.9553375f * A1[11] + (-(0.2955f * A1[13]))) * 0.9553375f + (0.9553375f * A1[13] + 0.2955f * A1[11]) * -0.2955f; // e0 ^ (e1 ^ e2)
		At[12] = ((-(0.2955f * ay)) + -0.0591f) * -0.2955f + 0.01746405f + (0.9553375f * ay + 0.191f) * 0.9553375f + 0.18246946249999998f; // e0 ^ (e1 ^ e3)
		At[13] = (-((0.9553375f * A1[11] + (-(0.2955f * A1[13]))) * -0.2955f)) + (0.9553375f * A1[13] + 0.2955f * A1[11]) * 0.9553375f; // e0 ^ (e2 ^ e3)
		At[14] = 0.9999899889062499f; // e1 ^ (e2 ^ e3)
		Bt[1] = ((-(0.2955f * by)) + -0.0591f) * 0.9553375f + -0.0564405f + (-((0.9553375f * by + 0.191f) * -0.2955f)) + 0.05646044625f; // e0
		Bt[11] = (0.9553375f * B1[11] + (-(0.2955f * B1[13]))) * 0.9553375f + (0.9553375f * B1[13] + 0.2955f * B1[11]) * -0.2955f; // e0 ^ (e1 ^ e2)
		Bt[12] = ((-(0.2955f * by)) + -0.0591f) * -0.2955f + 0.01746405f + (0.9553375f * by + 0.191f) * 0.9553375f + 0.18246946249999998f; // e0 ^ (e1 ^ e3)
		Bt[13] = (-((0.9553375f * B1[11] + (-(0.2955f * B1[13]))) * -0.2955f)) + (0.9553375f * B1[13] + 0.2955f * B1[11]) * 0.9553375f; // e0 ^ (e2 ^ e3)
		Bt[14] = 0.9999899889062499f; // e1 ^ (e2 ^ e3)
		Ct[1] = ((-(0.2955f * cy)) + -0.0591f) * 0.9553375f + -0.0564405f + (-((0.9553375f * cy + 0.191f) * -0.2955f)) + 0.05646044625f; // e0
		Ct[11] = (0.9553375f * C1[11] + (-(0.2955f * C1[13]))) * 0.9553375f + (0.9553375f * C1[13] + 0.2955f * C1[11]) * -0.2955f; // e0 ^ (e1 ^ e2)
		Ct[12] = ((-(0.2955f * cy)) + -0.0591f) * -0.2955f + 0.01746405f + (0.9553375f * cy + 0.191f) * 0.9553375f + 0.18246946249999998f; // e0 ^ (e1 ^ e3)
		Ct[13] = (-((0.9553375f * C1[11] + (-(0.2955f * C1[13]))) * -0.2955f)) + (0.9553375f * C1[13] + 0.2955f * C1[11]) * 0.9553375f; // e0 ^ (e2 ^ e3)
		Ct[14] = 0.9999899889062499f; // e1 ^ (e2 ^ e3)
		macro_Motor_temp[5] = At[13] + 0.9999899889062499f * (-A1[13]); // e0 ^ e1
		macro_Motor_temp[6] = (-At[12]) + (-(0.9999899889062499f * (-ay))); // e0 ^ e2
		macro_Motor_temp[7] = At[11] + 0.9999899889062499f * (-A1[11]); // e0 ^ e3
		macro_Motor_temp[15] = (-At[1]); // e0 ^ (e1 ^ (e2 ^ e3))
		VA[5] = macro_Motor_temp[5] * 0.5000025027859653f; // e0 ^ e1
		VA[6] = macro_Motor_temp[6] * 0.5000025027859653f; // e0 ^ e2
		VA[7] = macro_Motor_temp[7] * 0.5000025027859653f; // e0 ^ e3
		VA[15] = macro_Motor_temp[15] * 0.5000025027859653f; // e0 ^ (e1 ^ (e2 ^ e3))
		B2[1] = (-VA[15]) + VA[15]; // e0
		B2[11] = B1[11] + VA[7] + VA[7]; // e0 ^ (e1 ^ e2)
		B2[12] = by + (-VA[6]) + (-VA[6]); // e0 ^ (e1 ^ e3)
		B2[13] = B1[13] + VA[5] + VA[5]; // e0 ^ (e2 ^ e3)
		C2[1] = (-VA[15]) + VA[15]; // e0
		C2[11] = C1[11] + VA[7] + VA[7]; // e0 ^ (e1 ^ e2)
		C2[12] = cy + (-VA[6]) + (-VA[6]); // e0 ^ (e1 ^ e3)
		C2[13] = C1[13] + VA[5] + VA[5]; // e0 ^ (e2 ^ e3)
		L1[0] = 0.9999899889062499f * Bt[1] + (-(At[1] * 0.9999899889062499f)); // 1.0
		L1[5] = At[12] * (-Bt[11]) + (-((-At[11]) * Bt[12])); // e0 ^ e1
		L1[6] = (-((-At[13]) * (-Bt[11]) + (-((-At[11]) * (-Bt[13]))))); // e0 ^ e2
		L1[7] = (-At[13]) * Bt[12] + (-(At[12] * (-Bt[13]))); // e0 ^ e3
		L1[8] = 0.9999899889062499f * (-Bt[11]) + (-((-At[11]) * 0.9999899889062499f)); // e1 ^ e2
		L1[9] = (-(0.9999899889062499f * Bt[12] + (-(At[12] * 0.9999899889062499f)))); // e1 ^ e3
		L1[10] = 0.9999899889062499f * (-Bt[13]) + (-((-At[13]) * 0.9999899889062499f)); // e2 ^ e3
		L2[0] = 0.9999899889062499f * B2[1] + (-At[1]); // 1.0
		L2[5] = At[12] * (-B2[11]) + (-((-At[11]) * B2[12])); // e0 ^ e1
		L2[6] = (-((-At[13]) * (-B2[11]) + (-((-At[11]) * (-B2[13]))))); // e0 ^ e2
		L2[7] = (-At[13]) * B2[12] + (-(At[12] * (-B2[13]))); // e0 ^ e3
		L2[8] = 0.9999899889062499f * (-B2[11]) + At[11]; // e1 ^ e2
		L2[9] = (-(0.9999899889062499f * B2[12] + (-At[12]))); // e1 ^ e3
		L2[10] = 0.9999899889062499f * (-B2[13]) + At[13]; // e2 ^ e3
		macro_Motor_temp1[0] = 1.0f + L1[0] * L2[0] / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + (-(L1[8] * (-L2[8]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + (-(L1[9] * (-L2[9]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + (-(L1[10] * (-L2[10]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))); // 1.0
		macro_Motor_temp1[5] = L1[0] * (-L2[5]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[5] * L2[0] / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + (-(L1[6] * (-L2[8]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + (-(L1[7] * (-L2[9]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + L1[8] * (-L2[6]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[9] * (-L2[7]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))); // e0 ^ e1
		macro_Motor_temp1[6] = L1[0] * (-L2[6]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[5] * (-L2[8]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[6] * L2[0] / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + (-(L1[7] * (-L2[10]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + (-(L1[8] * (-L2[5]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + L1[10] * (-L2[7]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))); // e0 ^ e2
		macro_Motor_temp1[7] = L1[0] * (-L2[7]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[5] * (-L2[9]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[6] * (-L2[10]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[7] * L2[0] / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + (-(L1[9] * (-L2[5]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + (-(L1[10] * (-L2[6]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))); // e0 ^ e3
		macro_Motor_temp1[8] = L1[0] * (-L2[8]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[8] * L2[0] / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + (-(L1[9] * (-L2[10]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + L1[10] * (-L2[9]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))); // e1 ^ e2
		macro_Motor_temp1[9] = L1[0] * (-L2[9]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[8] * (-L2[10]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[9] * L2[0] / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + (-(L1[10] * (-L2[8]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))); // e1 ^ e3
		macro_Motor_temp1[10] = L1[0] * (-L2[10]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + (-(L1[8] * (-L2[9]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + L1[9] * (-L2[8]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[10] * L2[0] / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))); // e2 ^ e3
		macro_Motor_temp1[15] = L1[5] * (-L2[10]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + (-(L1[6] * (-L2[9]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + L1[7] * (-L2[8]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + L1[8] * (-L2[7]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))) + (-(L1[9] * (-L2[6]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))))) + L1[10] * (-L2[5]) / (L2[0] * L2[0] + (-(L2[8] * (-L2[8]))) + (-(L2[9] * (-L2[9]))) + (-(L2[10] * (-L2[10])))); // e0 ^ (e1 ^ (e2 ^ e3))
		macro_Motor_abstemp1[0] = MathF.Sqrt(MathF.Abs(macro_Motor_temp1[0] * macro_Motor_temp1[0] + (-(macro_Motor_temp1[8] * (-macro_Motor_temp1[8]))) + (-(macro_Motor_temp1[9] * (-macro_Motor_temp1[9]))) + (-(macro_Motor_temp1[10] * (-macro_Motor_temp1[10]))))); // 1.0
		VB[0] = macro_Motor_temp1[0] * macro_Motor_abstemp1[0] / (macro_Motor_abstemp1[0] * macro_Motor_abstemp1[0]); // 1.0
		VB[5] = macro_Motor_temp1[5] * macro_Motor_abstemp1[0] / (macro_Motor_abstemp1[0] * macro_Motor_abstemp1[0]); // e0 ^ e1
		VB[6] = macro_Motor_temp1[6] * macro_Motor_abstemp1[0] / (macro_Motor_abstemp1[0] * macro_Motor_abstemp1[0]); // e0 ^ e2
		VB[7] = macro_Motor_temp1[7] * macro_Motor_abstemp1[0] / (macro_Motor_abstemp1[0] * macro_Motor_abstemp1[0]); // e0 ^ e3
		VB[8] = macro_Motor_temp1[8] * macro_Motor_abstemp1[0] / (macro_Motor_abstemp1[0] * macro_Motor_abstemp1[0]); // e1 ^ e2
		VB[9] = macro_Motor_temp1[9] * macro_Motor_abstemp1[0] / (macro_Motor_abstemp1[0] * macro_Motor_abstemp1[0]); // e1 ^ e3
		VB[10] = macro_Motor_temp1[10] * macro_Motor_abstemp1[0] / (macro_Motor_abstemp1[0] * macro_Motor_abstemp1[0]); // e2 ^ e3
		VB[15] = macro_Motor_temp1[15] * macro_Motor_abstemp1[0] / (macro_Motor_abstemp1[0] * macro_Motor_abstemp1[0]); // e0 ^ (e1 ^ (e2 ^ e3))
		C3[11] = (VB[0] * C2[1] + (-(VB[8] * C2[11])) + (-(VB[9] * C2[12])) + (-(VB[10] * C2[13])) + (-VB[15])) * (-VB[8]) + (-((-VB[10]) * (-VB[6]))) + VB[9] * (-VB[5]) + (-((-VB[8]) * VB[15])) + (VB[0] * C2[11] + VB[7] + VB[8] * C2[1] + (-(VB[9] * C2[13])) + VB[10] * C2[12]) * VB[0] + (-((VB[0] * C2[12] + (-VB[6]) + VB[8] * C2[13] + VB[9] * C2[1] + (-(VB[10] * C2[11]))) * (-VB[10]))) + (VB[0] * C2[13] + VB[5] + (-(VB[8] * C2[12])) + VB[9] * C2[11] + VB[10] * C2[1]) * (-VB[9]) + (-(VB[0] * (-VB[7]))); // e0 ^ (e1 ^ e2)
		C3[12] = (VB[0] * C2[1] + (-(VB[8] * C2[11])) + (-(VB[9] * C2[12])) + (-(VB[10] * C2[13])) + (-VB[15])) * (-VB[9]) + (-((-VB[10]) * (-VB[7]))) + VB[9] * VB[15] + (-VB[8]) * (-VB[5]) + (VB[0] * C2[11] + VB[7] + VB[8] * C2[1] + (-(VB[9] * C2[13])) + VB[10] * C2[12]) * (-VB[10]) + (VB[0] * C2[12] + (-VB[6]) + VB[8] * C2[13] + VB[9] * C2[1] + (-(VB[10] * C2[11]))) * VB[0] + (-((VB[0] * C2[13] + VB[5] + (-(VB[8] * C2[12])) + VB[9] * C2[11] + VB[10] * C2[1]) * (-VB[8]))) + VB[0] * (-VB[6]); // e0 ^ (e1 ^ e3)
		C3[13] = (VB[0] * C2[1] + (-(VB[8] * C2[11])) + (-(VB[9] * C2[12])) + (-(VB[10] * C2[13])) + (-VB[15])) * (-VB[10]) + (-((-VB[10]) * VB[15])) + (-(VB[9] * (-VB[7]))) + (-VB[8]) * (-VB[6]) + (-((VB[0] * C2[11] + VB[7] + VB[8] * C2[1] + (-(VB[9] * C2[13])) + VB[10] * C2[12]) * (-VB[9]))) + (VB[0] * C2[12] + (-VB[6]) + VB[8] * C2[13] + VB[9] * C2[1] + (-(VB[10] * C2[11]))) * (-VB[8]) + (VB[0] * C2[13] + VB[5] + (-(VB[8] * C2[12])) + VB[9] * C2[11] + VB[10] * C2[1]) * VB[0] + (-(VB[0] * (-VB[5]))); // e0 ^ (e2 ^ e3)
		C3[14] = (-VB[10]) * (-VB[10]) + (-(VB[9] * (-VB[9]))) + (-VB[8]) * (-VB[8]) + VB[0] * VB[0]; // e1 ^ (e2 ^ e3)
		P1[1] = L1[7] * (-Ct[11]) + (-((-L1[6]) * Ct[12])) + L1[5] * (-Ct[13]); // e0
		P1[2] = (-((-L1[9]) * (-Ct[11]) + (-(L1[8] * Ct[12])) + L1[5] * 0.9999899889062499f)); // e1
		P1[3] = L1[10] * (-Ct[11]) + (-(L1[8] * (-Ct[13]))) + (-L1[6]) * 0.9999899889062499f; // e2
		P1[4] = (-(L1[10] * Ct[12] + (-((-L1[9]) * (-Ct[13]))) + L1[7] * 0.9999899889062499f)); // e3
		P2[1] = L1[7] * (-C3[11]) + (-((-L1[6]) * C3[12])) + L1[5] * (-C3[13]); // e0
		P2[2] = (-((-L1[9]) * (-C3[11]) + (-(L1[8] * C3[12])) + L1[5] * C3[14])); // e1
		P2[3] = L1[10] * (-C3[11]) + (-(L1[8] * (-C3[13]))) + (-L1[6]) * C3[14]; // e2
		P2[4] = (-(L1[10] * C3[12] + (-((-L1[9]) * (-C3[13]))) + L1[7] * C3[14])); // e3
		macro_Motor_temp2[0] = 1.0f + P1[2] * P2[2] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]) + P1[3] * P2[3] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]) + P1[4] * P2[4] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]); // 1.0
		macro_Motor_temp2[5] = P1[1] * P2[2] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]) + (-(P1[2] * P2[1] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]))); // e0 ^ e1
		macro_Motor_temp2[6] = P1[1] * P2[3] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]) + (-(P1[3] * P2[1] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]))); // e0 ^ e2
		macro_Motor_temp2[7] = P1[1] * P2[4] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]) + (-(P1[4] * P2[1] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]))); // e0 ^ e3
		macro_Motor_temp2[8] = P1[2] * P2[3] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]) + (-(P1[3] * P2[2] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]))); // e1 ^ e2
		macro_Motor_temp2[9] = P1[2] * P2[4] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]) + (-(P1[4] * P2[2] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]))); // e1 ^ e3
		macro_Motor_temp2[10] = P1[3] * P2[4] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]) + (-(P1[4] * P2[3] / (P2[2] * P2[2] + P2[3] * P2[3] + P2[4] * P2[4]))); // e2 ^ e3
		macro_Motor_abstemp2[0] = MathF.Sqrt(MathF.Abs(macro_Motor_temp2[0] * macro_Motor_temp2[0] + (-(macro_Motor_temp2[8] * (-macro_Motor_temp2[8]))) + (-(macro_Motor_temp2[9] * (-macro_Motor_temp2[9]))) + (-(macro_Motor_temp2[10] * (-macro_Motor_temp2[10]))))); // 1.0
		VC[0] = macro_Motor_temp2[0] * macro_Motor_abstemp2[0] / (macro_Motor_abstemp2[0] * macro_Motor_abstemp2[0]); // 1.0
		VC[5] = macro_Motor_temp2[5] * macro_Motor_abstemp2[0] / (macro_Motor_abstemp2[0] * macro_Motor_abstemp2[0]); // e0 ^ e1
		VC[6] = macro_Motor_temp2[6] * macro_Motor_abstemp2[0] / (macro_Motor_abstemp2[0] * macro_Motor_abstemp2[0]); // e0 ^ e2
		VC[7] = macro_Motor_temp2[7] * macro_Motor_abstemp2[0] / (macro_Motor_abstemp2[0] * macro_Motor_abstemp2[0]); // e0 ^ e3
		VC[8] = macro_Motor_temp2[8] * macro_Motor_abstemp2[0] / (macro_Motor_abstemp2[0] * macro_Motor_abstemp2[0]); // e1 ^ e2
		VC[9] = macro_Motor_temp2[9] * macro_Motor_abstemp2[0] / (macro_Motor_abstemp2[0] * macro_Motor_abstemp2[0]); // e1 ^ e3
		VC[10] = macro_Motor_temp2[10] * macro_Motor_abstemp2[0] / (macro_Motor_abstemp2[0] * macro_Motor_abstemp2[0]); // e2 ^ e3
		V[0] = VC[0] * VB[0] + (-(VC[8] * VB[8])) + (-(VC[9] * VB[9])) + (-(VC[10] * VB[10])); // 1.0
		V[5] = (VC[0] * VB[0] + (-(VC[8] * VB[8])) + (-(VC[9] * VB[9])) + (-(VC[10] * VB[10]))) * VA[5] + VC[0] * VB[5] + VC[5] * VB[0] + (-(VC[6] * VB[8])) + (-(VC[7] * VB[9])) + VC[8] * VB[6] + VC[9] * VB[7] + (-(VC[10] * VB[15])) + (VC[0] * VB[8] + VC[8] * VB[0] + (-(VC[9] * VB[10])) + VC[10] * VB[9]) * VA[6] + (VC[0] * VB[9] + VC[8] * VB[10] + VC[9] * VB[0] + (-(VC[10] * VB[8]))) * VA[7] + (-((VC[0] * VB[10] + (-(VC[8] * VB[9])) + VC[9] * VB[8] + VC[10] * VB[0]) * VA[15])); // e0 ^ e1
		V[6] = (VC[0] * VB[0] + (-(VC[8] * VB[8])) + (-(VC[9] * VB[9])) + (-(VC[10] * VB[10]))) * VA[6] + VC[0] * VB[6] + VC[5] * VB[8] + VC[6] * VB[0] + (-(VC[7] * VB[10])) + (-(VC[8] * VB[5])) + VC[9] * VB[15] + VC[10] * VB[7] + (-((VC[0] * VB[8] + VC[8] * VB[0] + (-(VC[9] * VB[10])) + VC[10] * VB[9]) * VA[5])) + (VC[0] * VB[9] + VC[8] * VB[10] + VC[9] * VB[0] + (-(VC[10] * VB[8]))) * VA[15] + (VC[0] * VB[10] + (-(VC[8] * VB[9])) + VC[9] * VB[8] + VC[10] * VB[0]) * VA[7]; // e0 ^ e2
		V[7] = (VC[0] * VB[0] + (-(VC[8] * VB[8])) + (-(VC[9] * VB[9])) + (-(VC[10] * VB[10]))) * VA[7] + VC[0] * VB[7] + VC[5] * VB[9] + VC[6] * VB[10] + VC[7] * VB[0] + (-(VC[8] * VB[15])) + (-(VC[9] * VB[5])) + (-(VC[10] * VB[6])) + (-((VC[0] * VB[8] + VC[8] * VB[0] + (-(VC[9] * VB[10])) + VC[10] * VB[9]) * VA[15])) + (-((VC[0] * VB[9] + VC[8] * VB[10] + VC[9] * VB[0] + (-(VC[10] * VB[8]))) * VA[5])) + (-((VC[0] * VB[10] + (-(VC[8] * VB[9])) + VC[9] * VB[8] + VC[10] * VB[0]) * VA[6])); // e0 ^ e3
		V[8] = VC[0] * VB[8] + VC[8] * VB[0] + (-(VC[9] * VB[10])) + VC[10] * VB[9]; // e1 ^ e2
		V[9] = VC[0] * VB[9] + VC[8] * VB[10] + VC[9] * VB[0] + (-(VC[10] * VB[8])); // e1 ^ e3
		V[10] = VC[0] * VB[10] + (-(VC[8] * VB[9])) + VC[9] * VB[8] + VC[10] * VB[0]; // e2 ^ e3
		V[15] = (VC[0] * VB[0] + (-(VC[8] * VB[8])) + (-(VC[9] * VB[9])) + (-(VC[10] * VB[10]))) * VA[15] + (VC[0] * VB[8] + VC[8] * VB[0] + (-(VC[9] * VB[10])) + VC[10] * VB[9]) * VA[7] + (-((VC[0] * VB[9] + VC[8] * VB[10] + VC[9] * VB[0] + (-(VC[10] * VB[8]))) * VA[6])) + (VC[0] * VB[10] + (-(VC[8] * VB[9])) + VC[9] * VB[8] + VC[10] * VB[0]) * VA[5] + VC[0] * VB[15] + VC[5] * VB[10] + (-(VC[6] * VB[9])) + VC[7] * VB[8] + VC[8] * VB[7] + (-(VC[9] * VB[6])) + VC[10] * VB[5]; // e0 ^ (e1 ^ (e2 ^ e3))
		lerp[0] = 1.0f - t + V[0] * t; // 1.0
		lerp[5] = V[5] * t; // e0 ^ e1
		lerp[6] = V[6] * t; // e0 ^ e2
		lerp[7] = V[7] * t; // e0 ^ e3
		lerp[8] = V[8] * t; // e1 ^ e2
		lerp[9] = V[9] * t; // e1 ^ e3
		lerp[10] = V[10] * t; // e2 ^ e3
		lerp[15] = V[15] * t; // e0 ^ (e1 ^ (e2 ^ e3))
		AI[11] = ((-(lerp[8] * A1[11])) + (-(lerp[9] * ay)) + (-(lerp[10] * A1[13])) + (-lerp[15])) * (-lerp[8]) + (-((-lerp[10]) * (-lerp[6]))) + lerp[9] * (-lerp[5]) + (-((-lerp[8]) * lerp[15])) + (lerp[0] * A1[11] + lerp[7] + (-(lerp[9] * A1[13])) + lerp[10] * ay) * lerp[0] + (-((lerp[0] * ay + (-lerp[6]) + lerp[8] * A1[13] + (-(lerp[10] * A1[11]))) * (-lerp[10]))) + (lerp[0] * A1[13] + lerp[5] + (-(lerp[8] * ay)) + lerp[9] * A1[11]) * (-lerp[9]) + (-(lerp[0] * (-lerp[7]))); // e0 ^ (e1 ^ e2)
		AI[12] = ((-(lerp[8] * A1[11])) + (-(lerp[9] * ay)) + (-(lerp[10] * A1[13])) + (-lerp[15])) * (-lerp[9]) + (-((-lerp[10]) * (-lerp[7]))) + lerp[9] * lerp[15] + (-lerp[8]) * (-lerp[5]) + (lerp[0] * A1[11] + lerp[7] + (-(lerp[9] * A1[13])) + lerp[10] * ay) * (-lerp[10]) + (lerp[0] * ay + (-lerp[6]) + lerp[8] * A1[13] + (-(lerp[10] * A1[11]))) * lerp[0] + (-((lerp[0] * A1[13] + lerp[5] + (-(lerp[8] * ay)) + lerp[9] * A1[11]) * (-lerp[8]))) + lerp[0] * (-lerp[6]); // e0 ^ (e1 ^ e3)
		AI[13] = ((-(lerp[8] * A1[11])) + (-(lerp[9] * ay)) + (-(lerp[10] * A1[13])) + (-lerp[15])) * (-lerp[10]) + (-((-lerp[10]) * lerp[15])) + (-(lerp[9] * (-lerp[7]))) + (-lerp[8]) * (-lerp[6]) + (-((lerp[0] * A1[11] + lerp[7] + (-(lerp[9] * A1[13])) + lerp[10] * ay) * (-lerp[9]))) + (lerp[0] * ay + (-lerp[6]) + lerp[8] * A1[13] + (-(lerp[10] * A1[11]))) * (-lerp[8]) + (lerp[0] * A1[13] + lerp[5] + (-(lerp[8] * ay)) + lerp[9] * A1[11]) * lerp[0] + (-(lerp[0] * (-lerp[5]))); // e0 ^ (e2 ^ e3)
		BI[11] = ((-(lerp[8] * B1[11])) + (-(lerp[9] * by)) + (-(lerp[10] * B1[13])) + (-lerp[15])) * (-lerp[8]) + (-((-lerp[10]) * (-lerp[6]))) + lerp[9] * (-lerp[5]) + (-((-lerp[8]) * lerp[15])) + (lerp[0] * B1[11] + lerp[7] + (-(lerp[9] * B1[13])) + lerp[10] * by) * lerp[0] + (-((lerp[0] * by + (-lerp[6]) + lerp[8] * B1[13] + (-(lerp[10] * B1[11]))) * (-lerp[10]))) + (lerp[0] * B1[13] + lerp[5] + (-(lerp[8] * by)) + lerp[9] * B1[11]) * (-lerp[9]) + (-(lerp[0] * (-lerp[7]))); // e0 ^ (e1 ^ e2)
		BI[12] = ((-(lerp[8] * B1[11])) + (-(lerp[9] * by)) + (-(lerp[10] * B1[13])) + (-lerp[15])) * (-lerp[9]) + (-((-lerp[10]) * (-lerp[7]))) + lerp[9] * lerp[15] + (-lerp[8]) * (-lerp[5]) + (lerp[0] * B1[11] + lerp[7] + (-(lerp[9] * B1[13])) + lerp[10] * by) * (-lerp[10]) + (lerp[0] * by + (-lerp[6]) + lerp[8] * B1[13] + (-(lerp[10] * B1[11]))) * lerp[0] + (-((lerp[0] * B1[13] + lerp[5] + (-(lerp[8] * by)) + lerp[9] * B1[11]) * (-lerp[8]))) + lerp[0] * (-lerp[6]); // e0 ^ (e1 ^ e3)
		BI[13] = ((-(lerp[8] * B1[11])) + (-(lerp[9] * by)) + (-(lerp[10] * B1[13])) + (-lerp[15])) * (-lerp[10]) + (-((-lerp[10]) * lerp[15])) + (-(lerp[9] * (-lerp[7]))) + (-lerp[8]) * (-lerp[6]) + (-((lerp[0] * B1[11] + lerp[7] + (-(lerp[9] * B1[13])) + lerp[10] * by) * (-lerp[9]))) + (lerp[0] * by + (-lerp[6]) + lerp[8] * B1[13] + (-(lerp[10] * B1[11]))) * (-lerp[8]) + (lerp[0] * B1[13] + lerp[5] + (-(lerp[8] * by)) + lerp[9] * B1[11]) * lerp[0] + (-(lerp[0] * (-lerp[5]))); // e0 ^ (e2 ^ e3)
		CI[11] = ((-(lerp[8] * C1[11])) + (-(lerp[9] * cy)) + (-(lerp[10] * C1[13])) + (-lerp[15])) * (-lerp[8]) + (-((-lerp[10]) * (-lerp[6]))) + lerp[9] * (-lerp[5]) + (-((-lerp[8]) * lerp[15])) + (lerp[0] * C1[11] + lerp[7] + (-(lerp[9] * C1[13])) + lerp[10] * cy) * lerp[0] + (-((lerp[0] * cy + (-lerp[6]) + lerp[8] * C1[13] + (-(lerp[10] * C1[11]))) * (-lerp[10]))) + (lerp[0] * C1[13] + lerp[5] + (-(lerp[8] * cy)) + lerp[9] * C1[11]) * (-lerp[9]) + (-(lerp[0] * (-lerp[7]))); // e0 ^ (e1 ^ e2)
		CI[12] = ((-(lerp[8] * C1[11])) + (-(lerp[9] * cy)) + (-(lerp[10] * C1[13])) + (-lerp[15])) * (-lerp[9]) + (-((-lerp[10]) * (-lerp[7]))) + lerp[9] * lerp[15] + (-lerp[8]) * (-lerp[5]) + (lerp[0] * C1[11] + lerp[7] + (-(lerp[9] * C1[13])) + lerp[10] * cy) * (-lerp[10]) + (lerp[0] * cy + (-lerp[6]) + lerp[8] * C1[13] + (-(lerp[10] * C1[11]))) * lerp[0] + (-((lerp[0] * C1[13] + lerp[5] + (-(lerp[8] * cy)) + lerp[9] * C1[11]) * (-lerp[8]))) + lerp[0] * (-lerp[6]); // e0 ^ (e1 ^ e3)
		CI[13] = ((-(lerp[8] * C1[11])) + (-(lerp[9] * cy)) + (-(lerp[10] * C1[13])) + (-lerp[15])) * (-lerp[10]) + (-((-lerp[10]) * lerp[15])) + (-(lerp[9] * (-lerp[7]))) + (-lerp[8]) * (-lerp[6]) + (-((lerp[0] * C1[11] + lerp[7] + (-(lerp[9] * C1[13])) + lerp[10] * cy) * (-lerp[9]))) + (lerp[0] * cy + (-lerp[6]) + lerp[8] * C1[13] + (-(lerp[10] * C1[11]))) * (-lerp[8]) + (lerp[0] * C1[13] + lerp[5] + (-(lerp[8] * cy)) + lerp[9] * C1[11]) * lerp[0] + (-(lerp[0] * (-lerp[5]))); // e0 ^ (e2 ^ e3)
	}
}
